document.addEventListener('DOMContentLoaded', function() {
  var hamburger = document.querySelector('.nav-hamburger');
  var navLinks = document.querySelector('.nav-links');
  var navClose = document.querySelector('.nav-close');

  hamburger.addEventListener('click', function() {
    navLinks.classList.add('active');
    navClose.classList.add('active');
    hamburger.classList.add('active');
  });

  navClose.addEventListener('click', function() {
    navLinks.classList.remove('active');
    navClose.classList.remove('active');
    hamburger.classList.remove('active');
  });
});


const trainingsData = [
    {
        "date": "–°–µ–≥–æ–¥–Ω—è, 15 –Ω–æ—è–±—Ä—è",
        "trainings": [
            {
                "time": "10:30",
                "duration": "1,5 —á",
                "name": "–ì—Ä—É–ø–ø–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
                "location": "–õ—é–±–ª–∏–Ω–æ",
                "participants": 2,
                "price": "900‚ÇΩ"
            },
            {
                "time": "11:00",
                "duration": "1,5 —á",
                "name": "–ë–æ–∫–æ–≤—ã–µ –ø–æ–¥–∞—á–∏ –∏ –∏—Ö –ø—Ä–∏–µ–º. –¢–æ–ø-—Å–ø–∏–Ω —Å–ø—Ä–∞–≤–∞ —Å–æ –≤—Å–µ–≥–æ —Å—Ç–æ–ª–∞",
                "location": "HurricaneTT",
                "participants": 0,
                "price": "700‚ÇΩ"
            },
            {
                "time": "13:30",
                "duration": "1,5 —á",
                "name": "–ì—Ä—É–ø–ø–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
                "location": "–õ—é–±–ª–∏–Ω–æ",
                "participants": 0,
                "price": "800‚ÇΩ"
            }
        ]
    },
    {
        "date": "–ó–∞–≤—Ç—Ä–∞, 16 –Ω–æ—è–±—Ä—è",
        "trainings": [
            {
                "time": "19:00",
                "duration": "2 —á",
                "name": "–¢–æ–ø-—Å–ø–∏–Ω—ã —Å–ø—Ä–∞–≤–∞ —Å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º (–¥–≤—É—Ö –∏ —Ç—Ä–µ—Ö—Ö–æ–¥–æ–≤–∫–∏)",
                "location": "–õ—É–¶–µ–Ω—Ç—Ä",
                "participants": 2,
                "price": "1000‚ÇΩ"
            },
            {
                "time": "20:00",
                "duration": "1,5 —á",
                "name": "–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∞—á –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å —Ç–æ–ø-—Å–ø–∏–Ω–æ–º",
                "location": "–õ—é–±–ª–∏–Ω–æ",
                "participants": "0/12",
                "price": "1000‚ÇΩ"
            }
        ]
    },
    {
        "date": "–ß–µ—Ç–≤–µ—Ä–≥, 17 –Ω–æ—è–±—Ä—è",
        "trainings": [
            {
                "time": "15:00",
                "duration": "1,5 —á",
                "name": "–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –±–∞–∑–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
                "location": "HurricaneTT",
                "participants": 6,
                "price": "500‚ÇΩ"
            },
            {
                "time": "17:00",
                "duration": "2 —á",
                "name": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
                "location": "TTL-Savel",
                "participants": 4,
                "price": "800‚ÇΩ"
            },
            {
                "time": "18:30",
                "duration": "1,5 —á",
                "name": "–ì—Ä—É–ø–ø–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞",
                "location": "HurricaneTT",
                "participants": "3/12",
                "price": "1000‚ÇΩ"
            }
        ]
    }
];

const dayTemplate = document.getElementById('training-day-template').innerHTML;
const cardTemplate = document.getElementById('training-card-template').innerHTML;
const scheduleContainer = document.querySelector('.training-schedule-container');

// Function to create buttons
function createDayButtons() {
  const sessionDaysContainer = document.querySelector('.session-days');
  sessionDaysContainer.innerHTML = '';  // Clear existing buttons

  // Create buttons from training data
  trainingsData.forEach((day, index) => {
    const dayParts = day.date.split(', ');
    const button = document.createElement('button');
    button.className = 'day-button';
    button.dataset.day = 'day' + (index + 1);  // Match data-day with day IDs
    button.innerHTML = `
      <span class="weekday">${dayParts[0]}</span>
      <span>${dayParts[1]}</span>
    `;
    // Attach event listener to each button
    button.addEventListener('click', function() {
      switchDay(button.dataset.day);
    });
    sessionDaysContainer.appendChild(button);
  });
}

// Function to create training day schedules
function createTrainingDays() {
  scheduleContainer.innerHTML = '';  // Clear existing schedules

  trainingsData.forEach((day, index) => {
    const dayId = 'day' + (index + 1);
    let dayHtml = dayTemplate.replace('%DATE%', day.date).replace('class="training-day"', `class="training-day" id="${dayId}"`);
    let cardsHtml = day.trainings.map(training => cardTemplate
      .replace('%TIME%', training.time)
      .replace('%DURATION%', training.duration)
      .replace('%NAME%', training.name)
      .replace('%LOCATION%', training.location)
      .replace('%PARTICIPANTS%', training.participants)
      .replace('%PRICE%', training.price)
    ).join('');
    
    dayHtml = dayHtml.replace('<!-- –ö–∞—Ä—Ç–æ—á–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –±—É–¥—É—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω—ã —Å—é–¥–∞ -->', cardsHtml);
    scheduleContainer.innerHTML += dayHtml;
  });
}

// Function to switch training days
function switchDay(dayId) {
    // Check if the screen width is less than 430px
    if (window.innerWidth < 430) {
        // Mobile view: show only the selected day
        document.querySelectorAll('.training-day').forEach(function(day) {
            day.style.display = 'none';
        });
        const activeDay = document.getElementById(dayId);
        if (activeDay) {
            activeDay.style.display = 'block';
        }
    }
    // For desktop view, all days are already visible due to CSS

    // Update the active state for buttons regardless of screen width
    document.querySelectorAll('.day-button').forEach(function(button) {
        button.classList.remove('active');
        if (button.dataset.day === dayId) {
            button.classList.add('active');
        }
    });
}

// Initialize the page
createDayButtons();
createTrainingDays();// Display the first day by default

// Call switchDay on initial load only if it's a mobile view
if (window.innerWidth < 430) {
    console.log("<430")
    switchDay('day1'); // Display the first day by default on mobile
} else {
    // On desktop, display all days and set the first day as active
    document.querySelectorAll('.training-day').forEach(function(day) {
        day.style.display = 'block'; // Show all days
    });
    document.querySelector('.day-button[data-day="day1"]').classList.add('active');
}

// –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ —Å–ø–∏—Å–∫–∞
const trainingTopics = [
{
    emoji: 'üëü',
    title: '–†–∞–∑–º–∏–Ω–∫–∞',
    text: '–î–ª—è —Ä–∞–∑–æ–≥—Ä–µ–≤–∞ –º—ã—à—Ü, —á—Ç–æ–±—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–µ–ª–æ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–≤–º.'
  },
  {
    emoji: 'üèãÔ∏è‚Äç‚ôÄÔ∏è',
    title: '–§–∏–∑–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
    text: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è —Å–∏–ª—ã, –ª–æ–≤–∫–æ—Å—Ç–∏ –∏ –±—ã—Å—Ç—Ä–æ—Ç—ã —Ä–µ–∞–∫—Ü–∏–∏.'
  },
  {
    emoji: 'üèì',
    title: '–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏',
    text: '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–æ–∫ –∏–ª–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏ —Å –Ω—É–ª—è. –ò–≥—Ä–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º.'
  },
  {
    emoji: 'üß†',
    title: '–ò–≥—Ä–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è',
    text: '–ß—Ç–æ–±—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –±—ã–ª –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º.'
  },
  {
    emoji: 'ü§æ‚Äç‚ôÇÔ∏è',
    title: '–®–ø–∏–ª—å',
    text: '–ò–≥—Ä–∞ –∫–∞–∫ —à–ø–∏–ª—è–º–∏, —Ç–∞–∫ –∏ –ø—Ä–æ—Ç–∏–≤ –Ω–∏—Ö.'
  },
  {
    emoji: 'üèÜ',
    title: '–ò–≥—Ä–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö',
    text: '–°–æ–≤–µ—Ç—ã –ø–æ –∏–≥—Ä–µ –Ω–∞ —Å—á–µ—Ç, —Ç–∞–∫—Ç–∏–∫–∞, –≤—ã—è–≤–ª–µ–Ω–∏–µ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω —Å–æ–ø–µ—Ä–Ω–∏–∫–∞, –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏.'
  },
  {
    emoji: '‚öîÔ∏è',
    title: '–ê—Ç–∞–∫—É—é—â–∞—è –∏–≥—Ä–∞',
    text: '–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–ø-—Å–ø–∏–Ω–æ–≤ —Å–ø—Ä–∞–≤–∞ –∏ –∏–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –±–ª–æ–∫–æ–≤/–ø–æ–¥—Å—Ç–∞–≤–æ–∫, "—Å–≤–µ—á–µ–∫".'
  },
  {
    emoji: 'üõ°',
    title: '–ó–∞—â–∏—Ç–Ω–∞—è –∏–≥—Ä–∞',
    text: '–ù–∞—É—á–∏–º—Å—è –∏–≥—Ä–∞—Ç—å –ø–æ –∑–∞—â–∏—Ç–µ, —Ç–∞–∫ –∏ –ø—Ä–æ—Ç–∏–≤ –Ω–µ—ë.'
  },
  {
    emoji: 'ü§π‚Äç‚ôÇÔ∏è',
    title: '–ü–æ–¥–∞—á–∏',
    text: '–†–∞–∑—É—á–∏–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∞—á (–Ω–∏–∂–Ω–∏–µ, –≤–µ—Ä—Ö–Ω–∏–µ, –±–æ–∫–æ–≤—ã–µ –∏ –ª–µ–≤—ã–µ).'
  },
  {
    emoji: 'üìπ',
    title: '–í–∏–¥–µ–æ',
    text: '–ó–∞–ø–∏—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ–≤ —Å–µ–±—è —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã, —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏.'
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTML –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞
function createTrainingTopicHTML(topic) {
  return `
    <div class="training-points">
      <div class="emoji">${topic.emoji}</div>
      <div class="bullet-title">${topic.title}</div>
      <div class="point-text">${topic.text}</div>
    </div>
  `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function fillTrainingTopicsList() {
  const listContainer = document.querySelector('.training-topics-list');
  const topicsHTML = trainingTopics.map(createTrainingTopicHTML).join('');
  listContainer.innerHTML = topicsHTML;
}

// –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', fillTrainingTopicsList);

const cardDataArray = [
  {
    duration: "1 —á–∞—Å",
    price: "2500 ‚ÇΩ",
    features: [
      "–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏",
      "–ò–≥—Ä–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
      "–ê—Ç–∞–∫–∞ –∏ –∑–∞—â–∏—Ç–∞",
      "–ê—Ä–µ–Ω–¥–∞ —Å—Ç–æ–ª–∞ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞"
    ]
  },
  {
    duration: "1,5 —á–∞—Å–∞",
    price: "3500 ‚ÇΩ",
    features: [
      "–£–≥–ª—É–±–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ —Ç–µ—Ö–Ω–∏–∫–æ–π",
      "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
      "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
      "–†–∞–∑–±–æ—Ä –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π"
    ]
  },
  {
    duration: "2 —á–∞—Å–∞",
    price: "4500 ‚ÇΩ",
    features: [
      "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
      "–§–∏–∑–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
      "–ú–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
      "–ü–æ–ª–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ç–∏–ª—è"
    ]
  }
];

function createPersonalTrainingCard(data) {
  const template = document.getElementById('personal-training-card-template').content.cloneNode(true);

  template.querySelector('.personal-training-time').textContent = data.duration;
  template.querySelector('.personal-training-price').textContent = data.price;

  const featuresList = template.querySelector('.training-features');
  data.features.forEach(feature => {
    const li = document.createElement('li');
    li.textContent = feature;
    featuresList.appendChild(li);
  });

  return template;
}

document.addEventListener('DOMContentLoaded', () => {
  const cardContainer = document.getElementById('card-container');
  cardDataArray.forEach(cardData => {
    const cardElement = createPersonalTrainingCard(cardData);
    cardContainer.appendChild(cardElement);
  });
});

const reviewData = [
  {
    name: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ–º—ë–Ω–æ–≤",
    rating: 5,
    gameRating: 950,
    comment: "–¢—Ä–µ–Ω–µ—Ä –Ω–∞ –≤—ã—Å–æ—Ç–µ! –ú–µ—Ç–æ–¥–∏–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è –Ω–æ–≤—ã–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ, –∑–∞–º–µ—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–Ω—è—Ç–∏–π.",
    date: "24 –∏—é–Ω—è 2023 –≥.",
    avatar: "images/user1.png"
  },
  {
    name: "–î–º–∏—Ç—Ä–∏–π –°–º–∏—Ä–Ω–æ–≤",
    rating: 4,
    gameRating: 870,
    comment: "–•–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ú–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–æ –∏–Ω–æ–≥–¥–∞ —Ö–æ—á–µ—Ç—Å—è –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏.",
    date: "15 –∏—é–ª—è 2023 –≥.",
    avatar: "images/user2.png"
  },
  {
    name: "–ò–≥–æ—Ä—å –ù–∏–∫–æ–ª–∞–µ–≤",
    rating: 5,
    gameRating: 820,
    comment: "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢—Ä–µ–Ω–µ—Ä —É–¥–µ–ª—è–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ –∫–∞–∂–¥–æ–º—É —É—á–µ–Ω–∏–∫—É, –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–ª–æ–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö.",
    date: "10 –∞–≤–≥—É—Å—Ç–∞ 2023 –≥.",
    avatar: "images/user3.png"
  },
  {
    name: "–ï–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
    rating: 5,
    gameRating: 910,
    comment: "–¢—Ä–µ–Ω–µ—Ä –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π. –ó–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –µ—Å—Ç—å —á–µ—Ç–∫–∏–π –ø–ª–∞–Ω –Ω–∞ –∫–∞–∂–¥—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.",
    date: "21 –∞–≤–≥—É—Å—Ç–∞ 2023 –≥.",
    avatar: "images/user4.png"
  },
  {
    name: "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞",
    rating: 3,
    gameRating: 780,
    comment: "–ó–∞–Ω—è—Ç–∏—è –≤ —Ü–µ–ª–æ–º –Ω–µ–ø–ª–æ—Ö–∏–µ, –Ω–æ –æ–∂–∏–¥–∞–ª –±–æ–ª–µ–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ó–∞–Ω—è—Ç–∏—è –≤ —Ü–µ–ª–æ–º –Ω–µ–ø–ª–æ—Ö–∏–µ, –Ω–æ –æ–∂–∏–¥–∞–ª –±–æ–ª–µ–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.–ó–∞–Ω—è—Ç–∏—è –≤ —Ü–µ–ª–æ–º –Ω–µ–ø–ª–æ—Ö–∏–µ, –Ω–æ –æ–∂–∏–¥–∞–ª –±–æ–ª–µ–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.–ò–Ω–æ–≥–¥–∞ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ–ª—è–µ—Ç—Å—è –º–µ–Ω—å—à–µ, —á–µ–º –∑–∞—è–≤–ª–µ–Ω–æ.",
    date: "2 —Å–µ–Ω—Ç—è–±—Ä—è 2023 –≥.",
    avatar: "images/user5.png"
  }
];

function createStars(rating) {
  const roundedRating = Math.round(rating);
  let starsHtml = '';
  
  for (let i = 0; i < 5; i++) {
    if (i < roundedRating) {
      starsHtml += '<img src="images/full-star.svg" alt="Full Star" class="star">';
    } else {
      starsHtml += '<img src="images/empty-star.svg" alt="Empty Star" class="star">';
    }
  }

  return starsHtml;
}

function createReviewCard(data) {
  const template = document.getElementById('review-card-template').content.cloneNode(true);

  template.querySelector('.review-avatar').src = data.avatar;
  template.querySelector('.reviewer-name').textContent = data.name;
  template.querySelector('.review-rating').innerHTML = createStars(data.rating); // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ innerHTML, —Ç–∞–∫ –∫–∞–∫ –º—ã –¥–æ–±–∞–≤–ª—è–µ–º HTML-–∫–æ–Ω—Ç–µ–Ω—Ç
  template.querySelector('.review-date').textContent = data.date;
  template.querySelector('.review-comment').textContent = data.comment;
  template.querySelector('.rating-number').textContent = data.gameRating;

  return template;
}

document.addEventListener('DOMContentLoaded', () => {
  const reviewsContainer = document.getElementById('reviews-container');
  reviewData.forEach(data => {
    const reviewCard = createReviewCard(data);
    reviewsContainer.appendChild(reviewCard);
  });
});

const clubsData = [
  {
    name: "–ö—Ä—ã–ª—å—è",
    address: "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–æ–ª–±—É—Ö–∏–Ω–∞, –¥. 10, –∫. 4, –î–° \"–ö—Ä—ã–ª—å—è –°–æ–≤–µ—Ç–æ–≤\"",
    metro: "–ú–æ–ª–æ–¥–µ–∂–Ω–∞—è, –õ—É–∂–Ω–∏–∫–∏",
    link: "url_to_club_page" // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–ª—É–±–∞
  },
  {
    name: "–õ—É–∂–Ω–∏–∫–∏",
    address: "–≥. –ú–æ—Å–∫–≤–∞, –°–ö –õ—É–∂–Ω–∏–∫–∏, –ú–∞–ª–∞—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –∞—Ä–µ–Ω–∞",
    metro: "–í–æ—Ä–æ–±—å–µ–≤—ã –≥–æ—Ä—ã, –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è",
    link: "url_to_club_page"
  },
  {
    name: "Wing's Club",
    address: "–≥. –ú–æ—Å–∫–≤–∞, –ë–∞—Ä–≥–∞—Ç–∏–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä., –¥. 5 (–¢–¶ –§–∏–ª–∏–æ–Ω 4 —ç—Ç–∞–∂)",
    metro: "–ë–∞–≥—Ä–∞—Ç–∏–æ–Ω–æ–≤—Å–∫–∞—è, –§–∏–ª–∏",
    link: "url_to_club_page"
  }
];

function createClubElement(club) {
  const clubElement = document.createElement('div');
  clubElement.classList.add('club');

  const clubName = document.createElement('a');
  clubName.textContent = club.name;
  clubName.href = club.link;
  clubName.classList.add('club-name');
  clubElement.appendChild(clubName);

  const clubAddress = document.createElement('div');
  clubAddress.textContent = club.address;
  clubAddress.classList.add('club-address');
  clubElement.appendChild(clubAddress);

const clubMetroContainer = document.createElement('div');
  clubMetroContainer.classList.add('club-metro-container');

  const metroIcon = document.createElement('img');
  metroIcon.src = 'images/metro.svg'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–µ—Ä–Ω—ã–π
  metroIcon.alt = '–ú–µ—Ç—Ä–æ';
  metroIcon.classList.add('metro-icon');
  clubMetroContainer.appendChild(metroIcon);

  const clubMetro = document.createElement('div');
  clubMetro.textContent = club.metro;
  clubMetro.classList.add('club-metro');
  clubMetroContainer.appendChild(clubMetro);

  clubElement.appendChild(clubMetroContainer);

  return clubElement;
}
document.addEventListener('DOMContentLoaded', () => {
  const clubsContainer = document.getElementById('clubs-container'); // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç

  clubsData.forEach(club => {
    const clubElement = createClubElement(club);
    clubsContainer.appendChild(clubElement);
  });

  // –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å clubsContainer –≤ body, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –≤ DOM
});

document.addEventListener('DOMContentLoaded', () => {
  const faqQuestions = document.querySelectorAll('.faq-question');

  faqQuestions.forEach(question => {
    question.addEventListener('click', () => {
      const currentActiveQuestion = document.querySelector('.faq-question.active');
      if (currentActiveQuestion && currentActiveQuestion !== question) {
        currentActiveQuestion.classList.remove('active');
        currentActiveQuestion.nextElementSibling.classList.remove('active');
        currentActiveQuestion.nextElementSibling.style.maxHeight = 0;
      }

      question.classList.toggle('active');
      const answer = question.nextElementSibling;
      answer.classList.toggle('active');
      answer.style.maxHeight = answer.classList.contains('active') ? `${answer.scrollHeight}px` : '0';
    });
  });
});

const faqData = [
  {
    question: '–ö–∞–∫ –º–Ω–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–º—É —Ç–µ–Ω–Ω–∏—Å—É?',
    answer: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –Ω–∞—à —Å–∞–π—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏–≤ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö.'
  },
  {
    question: '–ö–∞–∫–æ–≤–∞ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–æ–≤—ã–º–∏ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏?',
    answer: '–ì—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –∫–æ–º–∞–Ω–¥–Ω—É—é —Ä–∞–±–æ—Ç—É, –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ñ–æ–∫—É—Å–∏—Ä—É—é—Ç—Å—è –Ω–∞ –≤–∞—à–∏—Ö –ª–∏—á–Ω—ã—Ö —Ü–µ–ª—è—Ö –∏ –Ω–∞–≤—ã–∫–∞—Ö.'
  },
  {
    question: '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?',
    answer: '–î–∞, —É –Ω–∞—Å –µ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è —Å–µ–±—è –≤–∞—Ä–∏–∞–Ω—Ç.'
  },
  {
    question: '–ú–æ–≥—É –ª–∏ —è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–æ–≤—ã–º –∑–∞–Ω—è—Ç–∏—è–º, –µ—Å–ª–∏ —è –Ω–∏–∫–æ–≥–¥–∞ —Ä–∞–Ω—å—à–µ –Ω–µ –∏–≥—Ä–∞–ª –≤ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å?',
    answer: '–ö–æ–Ω–µ—á–Ω–æ, –Ω–∞—à–∏ –≥—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, –≤–∫–ª—é—á–∞—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö.'
  },
  {
    question: '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –ª–∏ –≤—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?',
    answer: '–î–∞, –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ. –í–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–π—Ç–∏ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –∏–≥—Ä–æ–π!'
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
function createFaqItem(question, answer) {
  const faqItem = document.createElement('div');
  faqItem.classList.add('faq-item');

  const faqQuestion = document.createElement('button');
  faqQuestion.classList.add('faq-question');
  faqQuestion.innerHTML = `${question} <span class="arrow">&#9660;</span>`;
  faqItem.appendChild(faqQuestion);

  const faqAnswer = document.createElement('div');
  faqAnswer.classList.add('faq-answer');
  faqAnswer.innerHTML = `<p>${answer}</p>`;
  faqItem.appendChild(faqAnswer);

  return faqItem;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FAQ –±–ª–æ–∫–∞
function initFaq(faqData) {
  const faqContainer = document.createElement('div');
  faqContainer.classList.add('faq-container');

  faqData.forEach(faq => {
    const faqItem = createFaqItem(faq.question, faq.answer);
    faqContainer.appendChild(faqItem);
  });

  const faqSection = document.getElementById('faq-section');
  faqSection.appendChild(faqContainer);

  // –ê–∫–∫–æ—Ä–¥–µ–æ–Ω –ª–æ–≥–∏–∫–∞
  faqContainer.addEventListener('click', function(event) {
    const target = event.target.closest('.faq-question');
    if (!target) return;

    const isActive = target.classList.contains('active');
    faqContainer.querySelectorAll('.faq-question').forEach(question => {
      question.classList.remove('active');
      question.nextElementSibling.style.maxHeight = 0;
    });

    if (!isActive) {
      target.classList.add('active');
      const answer = target.nextElementSibling;
      answer.style.maxHeight = `${answer.scrollHeight}px`;
    }
  });
}

document.addEventListener('DOMContentLoaded', () => {
  initFaq(faqData);
});

const videoIDs = [
  'kWmhrjJQe9Q',
  'a5iF83N9P1A',
  'hBckMNiZ-MI',
  'rW623Kugitc'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ iframe –¥–ª—è –≤–∏–¥–µ–æ –Ω–∞ YouTube
function createVideoIframe(videoID) {
  const iframe = document.createElement('iframe');
  iframe.setAttribute('width', '100%');
  iframe.setAttribute('height', '100%');
  iframe.setAttribute('src', `https://www.youtube.com/embed/${videoID}`);
  iframe.setAttribute('title', 'YouTube video player');
  iframe.setAttribute('frameborder', '0');
  iframe.setAttribute('allow', 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture');
  iframe.setAttribute('allowfullscreen', true);
  return iframe;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
function addVideosToContainer(videoIDs) {
  const videoContainer = document.querySelector('.video-container');
  videoIDs.forEach(videoID => {
    const videoWrapper = document.createElement('div');
    videoWrapper.classList.add('video-wrapper');
    const iframe = createVideoIframe(videoID);
    videoWrapper.appendChild(iframe);
    videoContainer.appendChild(videoWrapper);
  });
}

document.addEventListener('DOMContentLoaded', () => {
  addVideosToContainer(videoIDs);
});

document.addEventListener('DOMContentLoaded', () => {
    
  const form = document.getElementById('contact-form');
  form.addEventListener('submit', function(event) {
    console.log("errorMessage")
    event.preventDefault();
    let valid = true;

    this.querySelectorAll('.input-group input, .input-group textarea').forEach(input => {
      const errorMessage = input.nextElementSibling; 
      console.log(errorMessage) // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
      if (!input.value.trim()) {
        errorMessage.textContent = '–≠—Ç–æ –ø–æ–ª–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        errorMessage.style.display = 'block'; // –î–µ–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤–∏–¥–∏–º—ã–º
        valid = false;
      } else {
        errorMessage.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      }
    });

    if (valid) {
      // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ AJAX –∏–ª–∏ –¥—Ä—É–≥–æ–π
      console.log('–§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'); // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    }
  });
});